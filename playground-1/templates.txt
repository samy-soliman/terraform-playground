# Define the AWS provider
provider "aws" {
  region = "us-east-1"
}

# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
}

# Define two availability zones
variable "azs" {
  type    = list(string)
  default = ["us-east-1a", "us-east-1b"]
}

# Create public and private subnets in each availability zone
resource "aws_subnet" "public_subnets" {
  count             = 4
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = element(["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24", "10.0.4.0/24"], count.index)
  availability_zone = element(var.azs, count.index % 2)
  map_public_ip_on_launch = true

  tags = {
    Name = "public-subnet-${count.index}"
  }
}

resource "aws_subnet" "private_subnets" {
  count             = 4
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = element(["10.0.5.0/24", "10.0.6.0/24", "10.0.7.0/24", "10.0.8.0/24"], count.index)
  availability_zone = element(var.azs, count.index % 2)

  tags = {
    Name = "private-subnet-${count.index}"
  }
}

# Create an internet gateway
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id
}

# Create a route table for public subnets
resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }
}

# Associate public subnets with the public route table
resource "aws_route_table_association" "public_subnet_associations" {
  count          = 2
  subnet_id      = element(aws_subnet.public_subnets[*].id, count.index)
  route_table_id = aws_route_table.public_route_table.id
}

# Create a security group for instances in private subnets (adjust rules as needed)
resource "aws_security_group" "private_sg" {
  name_prefix   = "private-sg-"
  description   = "Security group for instances in private subnets"
  vpc_id        = aws_vpc.my_vpc.id
}

# Example rule: Allow inbound SSH traffic from any IP (customize as needed)
resource "aws_security_group_rule" "private_ssh_ingress" {
  type        = "ingress"
  from_port   = 22
  to_port     = 22
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.private_sg.id
}
